@model UnivFI.WebUI.ViewModels.UIElement.ManageUserPermissionsViewModel

@{
    ViewData["Title"] = "사용자 권한 관리";
}

<div x-data="userPermissions" class="min-h-screen bg-gray-50">
    <!-- 상단 네비게이션 바 -->
    <div class="bg-white shadow-sm">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-4 flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <a href="javascript:history.back()" class="text-gray-500 hover:text-gray-700 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                    </a>
                    <h1 class="text-2xl font-bold text-gray-900">사용자 권한 관리</h1>
                </div>
                <button type="button" x-on:click="openModal"
                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200">
                    <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
                        fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                            clip-rule="evenodd" />
                    </svg>
                    사용자 추가
                </button>
            </div>
        </div>
    </div>

    <!-- 메인 컨텐츠 -->
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- 요소 정보 카드 -->
        <div class="bg-white rounded-xl shadow-sm mb-8 overflow-hidden">
            <div class="p-6 border-b border-gray-200">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                    <div>
                        <h2 class="text-xl font-semibold text-gray-900">@Model.ElementName</h2>
                        <p class="mt-1 text-sm text-gray-500">요소 키: @Model.ElementKey</p>
                    </div>
                    <div class="mt-4 sm:mt-0">
                        <span
                            class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 text-primary-800">
                            관리 중
                        </span>
                    </div>
                </div>
            </div>

            <!-- 권한이 있는 사용자 목록 -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                사용자명
                            </th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                이름
                            </th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                이메일
                            </th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                권한 부여일
                            </th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                작업
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var permission in Model.UserPermissions)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center">
                                            <span class="text-sm font-medium text-primary-700">
                                                @(permission.Name?.Substring(0, 1).ToUpper() ?? "U")
                                            </span>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@permission.UserName</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@permission.Name</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-500">@permission.Email</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div class="flex items-center">
                                        <svg class="h-4 w-4 text-gray-400 mr-2" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        @permission.GrantedAt?.ToString("yyyy-MM-dd HH:mm:ss")
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                    <button type="button" x-on:click="removeUser(@permission.UserId)"
                                        class="inline-flex items-center text-red-600 hover:text-red-900 transition-colors duration-200">
                                        <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                        권한 제거
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- 사용자 선택 모달 -->
    <partial name="_UserSelectionModal" />
</div>

@section Scripts {
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('userPermissions', () => ({
                isModalOpen: false,
                searchTerm: '',
                users: [],
                filteredUsers: [],
                selectedUsers: [],
                selectAll: false,
                elementId: @Model.ElementId,

                async init() {
                    await this.loadUsers();
                },

                openModal() {
                    this.isModalOpen = true;
                    if (this.users.length === 0) {
                        this.loadUsers();
                    }
                },

                closeModal() {
                    this.isModalOpen = false;
                    this.searchTerm = '';
                    this.selectedUsers = [];
                    this.selectAll = false;
                },

                async loadUsers() {
                    try {
                        const response = await fetch('/User/GetUsers');
                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                this.users = result.data;
                                this.filteredUsers = this.users;
                            } else {
                                console.error('사용자 목록 로드 실패:', result.message);
                                alert('사용자 목록을 가져오는데 실패했습니다.');
                            }
                        }
                    } catch (error) {
                        console.error('사용자 목록 로드 실패:', error);
                        alert('사용자 목록을 가져오는데 실패했습니다.');
                    }
                },

                searchUsers() {
                    if (!this.searchTerm) {
                        this.filteredUsers = this.users;
                        return;
                    }

                    const searchLower = this.searchTerm.toLowerCase();
                    this.filteredUsers = this.users.filter(user =>
                        user.userName?.toLowerCase().includes(searchLower) ||
                        user.name?.toLowerCase().includes(searchLower) ||
                        user.email?.toLowerCase().includes(searchLower)
                    );
                },

                toggleAll() {
                    if (this.selectAll) {
                        this.selectedUsers = this.filteredUsers.map(u => u.id);
                    } else {
                        this.selectedUsers = [];
                    }
                },

                async saveSelectedUsers() {
                    if (this.selectedUsers.length === 0) {
                        alert('선택된 사용자가 없습니다.');
                        return;
                    }

                    try {
                        const response = await fetch('/UIElement/AssignUserPermissions', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                elementId: this.elementId,
                                userIds: this.selectedUsers
                            })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                window.location.reload();
                            } else {
                                alert(result.message || '권한 부여 중 오류가 발생했습니다.');
                            }
                        } else {
                            alert('권한 부여 중 오류가 발생했습니다.');
                        }
                    } catch (error) {
                        console.error('권한 부여 실패:', error);
                        alert('권한 부여 중 오류가 발생했습니다.');
                    }
                },

                async removeUser(userId) {
                    if (!confirm('이 사용자의 권한을 제거하시겠습니까?')) {
                        return;
                    }

                    try {
                        const response = await fetch('/UIElement/RemoveUserPermission', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                elementId: this.elementId,
                                userId: userId
                            })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                window.location.reload();
                            } else {
                                alert(result.message || '권한 제거 중 오류가 발생했습니다.');
                            }
                        } else {
                            alert('권한 제거 중 오류가 발생했습니다.');
                        }
                    } catch (error) {
                        console.error('권한 제거 실패:', error);
                        alert('권한 제거 중 오류가 발생했습니다.');
                    }
                }
            }));
        });
    </script>
}