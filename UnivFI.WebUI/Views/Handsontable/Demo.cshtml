@{
    ViewData["Title"] = "Handsontable 데모 - 메뉴 목록";
}

@section Styles {
    <!-- Handsontable CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />
    <!-- Toast UI CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <!-- 커스텀 Handsontable CSS -->
    <link rel="stylesheet" href="~/css/handsontable-custom.css" />
}

<!-- 페이지 헤더 -->
<div class="bg-white border-b border-slate-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <nav class="flex items-center gap-2 text-sm text-slate-500" aria-label="breadcrumb">
            <a href="@Url.Action("Index", "Home")" class="hover:text-slate-700 transition-colors">
                <i class="fas fa-home"></i>
                <span class="sr-only">홈</span>
            </a>
            <span class="text-slate-400">/</span>
            <a href="@Url.Action("Index", "Handsontable")"
                class="hover:text-slate-700 transition-colors">Handsontable</a>
            <span class="text-slate-400">/</span>
            <span class="text-slate-900 font-medium">메뉴 계층 구조 목록</span>
        </nav>
        <h1 class="mt-4 text-3xl font-bold text-slate-900 tracking-tight">메뉴 계층 구조 목록</h1>
        <p class="mt-2 text-base text-slate-600">
            Handsontable을 사용하여 메뉴의 계층 구조를 효율적으로 관리할 수 있습니다.
        </p>
    </div>
</div>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 툴바 -->
    <div class="bg-white p-6 rounded-xl shadow-sm border border-slate-200 mb-6">
        <div class="flex flex-wrap gap-4 items-center">
            <button id="addRow"
                class="inline-flex items-center px-4 py-2.5 border border-transparent text-sm font-semibold rounded-lg shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                <i class="fas fa-plus mr-2"></i>
                <span>행 추가</span>
            </button>
            <button id="saveChanges"
                class="inline-flex items-center px-4 py-2.5 border border-transparent text-sm font-semibold rounded-lg shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all">
                <i class="fas fa-save mr-2"></i>
                <span>저장</span>
            </button>
            <div class="flex-1"></div>
            <div class="flex items-center gap-3">
                <button id="expandAll"
                    class="inline-flex items-center px-4 py-2.5 border border-slate-300 text-sm font-semibold rounded-lg text-slate-700 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    <i class="fas fa-chevron-down mr-2"></i>
                    <span>모두 펼치기</span>
                </button>
                <button id="collapseAll"
                    class="inline-flex items-center px-4 py-2.5 border border-slate-300 text-sm font-semibold rounded-lg text-slate-700 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    <i class="fas fa-chevron-up mr-2"></i>
                    <span>모두 접기</span>
                </button>
                <button id="exportExcel"
                    class="inline-flex items-center px-4 py-2.5 border border-slate-300 text-sm font-semibold rounded-lg text-slate-700 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    <i class="fas fa-file-excel mr-2"></i>
                    <span>Excel 내보내기</span>
                </button>
                <a href="@Url.Action("Index", "Handsontable")"
                    class="inline-flex items-center px-4 py-2.5 border border-slate-300 text-sm font-semibold rounded-lg text-slate-700 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    <i class="fas fa-arrow-left mr-2"></i>
                    <span>돌아가기</span>
                </a>
            </div>
        </div>
    </div>

    <!-- 검색 필드 -->
    <div class="mb-6">
        <div class="max-w-xs ml-auto">
            <div class="relative">
                <input type="text" id="search-input" placeholder="검색어 입력..."
                    class="block w-full pl-10 pr-4 py-2.5 border border-slate-300 rounded-lg text-sm placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-slate-400"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- 테이블 컨테이너 -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- 상태 메시지 -->
        <div id="status-message" class="hidden mx-6 mt-6"></div>

        <!-- 로딩 스피너 -->
        <div id="loading-spinner" class="loading-spinner hidden">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
        </div>

        <div class="p-6">
            <div class="hot-container">
                <div id="handsontable-container"></div>
            </div>
        </div>

        <!-- 상태 표시줄 -->
        <div class="bg-slate-50 px-6 py-4 border-t border-slate-200">
            <div class="flex items-center gap-6 text-sm text-slate-600">
                <span id="selection-info" class="flex items-center">
                    <i class="fas fa-mouse-pointer mr-2 text-blue-500"></i>
                    선택된 행: 없음
                </span>
                <span id="changes-info" class="flex items-center">
                    <i class="fas fa-edit mr-2 text-green-500"></i>
                    변경사항: 없음
                </span>
                <span id="filter-info" class="flex items-center">
                    <i class="fas fa-filter mr-2 text-amber-500"></i>
                    필터: 없음
                </span>
            </div>
        </div>
    </div>

    <!-- 도움말 섹션 -->
    <div class="mt-8 bg-white rounded-xl shadow-lg p-8">
        <h3 class="text-lg font-semibold text-slate-900 mb-6">기능 설명</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="space-y-4">
                <h4 class="font-medium text-slate-900 mb-4">기본 기능</h4>
                <ul class="space-y-3 text-sm text-slate-600">
                    <li class="flex items-center">
                        <i class="fas fa-sort text-blue-500 mr-3 w-5"></i>
                        열 헤더 클릭으로 정렬
                    </li>
                    <li class="flex items-center">
                        <i class="fas fa-filter text-blue-500 mr-3 w-5"></i>
                        우클릭으로 필터 설정
                    </li>
                    <li class="flex items-center">
                        <i class="fas fa-search text-blue-500 mr-3 w-5"></i>
                        검색으로 데이터 찾기
                    </li>
                    <li class="flex items-center">
                        <i class="fas fa-level-down-alt text-blue-500 mr-3 w-5"></i>
                        레벨별 들여쓰기 표시
                    </li>
                </ul>
            </div>
            <div class="space-y-4">
                <h4 class="font-medium text-slate-900 mb-4">키보드 단축키</h4>
                <ul class="space-y-3 text-sm text-slate-600">
                    <li class="flex items-center">
                        <kbd
                            class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                            + N</kbd>
                        새 행 추가
                    </li>
                    <li class="flex items-center">
                        <kbd
                            class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                            + S</kbd>
                        변경사항 저장
                    </li>
                    <li class="flex items-center">
                        <kbd
                            class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                            + F</kbd>
                        검색
                    </li>
                    <li class="flex items-center">
                        <kbd
                            class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Delete</kbd>
                        선택 행 삭제
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- 키보드 단축키 가이드 -->
<div id="keyboard-shortcuts"
    class="fixed bottom-5 right-5 bg-white p-6 rounded-xl shadow-lg border border-slate-200 hidden">
    <h4 class="font-medium text-slate-900 mb-4">키보드 단축키</h4>
    <ul class="space-y-3 text-sm text-slate-600">
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                + N</kbd>
            새 행 추가
        </li>
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                + S</kbd>
            저장
        </li>
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                + F</kbd>
            검색
        </li>
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Delete</kbd>
            선택 행 삭제
        </li>
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                + Z</kbd>
            실행 취소
        </li>
        <li class="flex items-center">
            <kbd
                class="px-2.5 py-1.5 bg-slate-100 text-slate-900 rounded-md text-xs font-semibold mr-3 min-w-[60px] text-center">Ctrl
                + Y</kbd>
            다시 실행
        </li>
    </ul>
</div>

@section Scripts {
    <!-- 필요한 스크립트 -->
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

    <!-- 메인 스크립트는 기존 코드를 유지하면서 아래 기능들을 추가 -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // DOM 요소
            const container = document.getElementById('handsontable-container');
            const expandAllBtn = document.getElementById('expandAll');
            const collapseAllBtn = document.getElementById('collapseAll');
            const saveChangesBtn = document.getElementById('saveChanges');
            const addRowBtn = document.getElementById('addRow');
            const statusMessage = document.getElementById('status-message');
            const loadingSpinner = document.getElementById('loading-spinner');

            // 로딩 스피너 표시/숨김 함수
            function showLoading() {
                if (loadingSpinner) {
                    loadingSpinner.classList.remove('hidden');
                }
            }

            function hideLoading() {
                if (loadingSpinner) {
                    loadingSpinner.classList.add('hidden');
                }
            }

            // 상태 변수
            let hot;
            let hiddenRows = [];
            const menuData = new Map();
            const originalData = new Map();
            let deletedRows = [];

            /**
             * 상태 메시지 표시 함수
             */
            function showStatusMessage(message, isSuccess) {
                const statusMessage = document.getElementById('status-message');
                if (!statusMessage) {
                    console.warn('상태 메시지 엘리먼트를 찾을 수 없습니다.');
                    return;
                }

                statusMessage.textContent = message;
                statusMessage.className = `${isSuccess ? 'bg-green-600' : 'bg-red-600'} text-white p-4 rounded mb-4`;
                statusMessage.classList.remove('hidden');

                // 3초 후 메시지 숨기기
                setTimeout(() => {
                    statusMessage.classList.add('hidden');
                }, 3000);
            }

            /**
             * 메뉴 데이터 가져오기
             */
            async function fetchMenuData() {
                showLoading();
                try {
                    const response = await fetch('/Handsontable/GetHierarchicalMenuData');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();

                    // 페이징 응답 구조 처리
                    const items = data.items || [];
                    if (!Array.isArray(items)) {
                        console.error('유효하지 않은 데이터 형식:', data);
                        throw new Error('유효하지 않은 데이터 형식입니다');
                    }

                    // hasChildren 속성 계산 및 데이터 가공
                    const processedItems = items.map(item => {
                        const hasChildren = items.some(child => child.parentId === item.id);
                        return {
                            ...item,
                            hasChildren,
                            indent: item.levels || 0
                        };
                    });

                    // Map 객체 업데이트
                    processedItems.forEach(item => {
                        menuData.set(item.id, item);
                        originalData.set(item.id, { ...item });
                    });

                    initializeTable(processedItems);
                    hideLoading();
                } catch (error) {
                    console.error('메뉴 데이터를 불러오는 중 오류가 발생했습니다:', error);
                    hideLoading();
                    container.innerHTML = `
                                                    <div class="text-center py-8 text-red-600">
                                                        <i class="fas fa-exclamation-triangle text-3xl mb-4"></i>
                                                        <p class="font-semibold">데이터를 불러올 수 없습니다.</p>
                                                        <p>오류: ${error.message || '알 수 없는 오류가 발생했습니다.'}</p>
                                                    </div>
                                                `;
                }
            }

            // 메뉴 데이터 가져오기 실행
            fetchMenuData();

            /**
             * 테이블 초기화 함수
             */
            function initializeTable(data) {
                if (!Array.isArray(data)) {
                    console.error('유효하지 않은 데이터 형식:', data);
                    return;
                }

                // 데이터 정제 - null, undefined 값 처리
                const cleanData = data.map(item => ({
                    id: item.id,
                    menuKey: item.menuKey || '',
                    title: item.title || '',
                    url: item.url || '',
                    parentId: item.parentId,
                    menuOrder: item.menuOrder || 0,
                    levels: item.levels || 0,
                    indent: item.levels || 0,
                    hasChildren: item.hasChildren || false,
                    useNewIcon: !!item.useNewIcon
                }));

                // 초기 모든 행 표시
                hiddenRows = [];

                // Handsontable 초기화 전 컨테이너 리셋
                container.innerHTML = '';

                try {
                    // 테이블 설정
                    hot = new Handsontable(container, {
                        data: cleanData,
                        dataSchema: {
                            id: null,
                            menuKey: '',
                            title: '',
                            url: '',
                            parentId: null,
                            menuOrder: 0,
                            levels: 0,
                            indent: 0,
                            hasChildren: false,
                            useNewIcon: false
                        },
                        rowHeaders: true,
                        colHeaders: ['ID', '메뉴키', '제목', 'URL', '부모ID', '순서', '레벨', '신규아이콘'],
                        columns: [
                            { data: 'id', type: 'numeric', readOnly: true, width: 80 },
                            {
                                data: 'menuKey',
                                type: 'text',
                                width: 150,
                                renderer: function (instance, td, row, col, prop, value, cellProperties) {
                                    const item = instance.getSourceDataAtRow(row);
                                    if (!item) return td;

                                    Handsontable.renderers.TextRenderer.apply(this, arguments);

                                    const indentLevel = Math.min(item.indent || 0, 4);
                                    td.className = `indent-${indentLevel}`;

                                    if (item.hasChildren) {
                                        td.classList.add('parent-row');
                                    } else {
                                        td.classList.add('nested-row');
                                    }

                                    return td;
                                }
                            },
                            { data: 'title', type: 'text', width: 250 },
                            { data: 'url', type: 'text', width: 250 },
                            { data: 'parentId', type: 'numeric', width: 100 },
                            { data: 'menuOrder', type: 'numeric', width: 80 },
                            { data: 'levels', type: 'numeric', width: 80 },
                            {
                                data: 'useNewIcon',
                                type: 'checkbox',
                                width: 100
                            }
                        ],
                        stretchH: 'all',
                        width: '100%',
                        height: '100%',
                        autoRowSize: false,
                        manualRowResize: true,
                        viewportRowRenderingOffset: 30,
                        cellPadding: 0,
                        renderAllRows: true,
                        autoColumnSize: false,
                        rowHeights: 22,
                        multiColumnSorting: true,
                        filters: true,
                        dropdownMenu: true,
                        contextMenu: true,
                        search: true,
                        licenseKey: 'non-commercial-and-evaluation',
                        outsideClickDeselects: true,
                        wordWrap: false,
                        preventOverflow: 'horizontal',
                        layoutDirection: 'inherit',
                        fixedRowsTop: 0,
                        fixedColumnsLeft: 0,
                        renderAllColumns: true,
                        afterRender: function () {
                            requestAnimationFrame(() => {
                                this.refreshDimensions();
                                const wtHolder = this.rootElement.querySelector('.wtHolder');
                                if (wtHolder) {
                                    wtHolder.style.width = '100%';
                                    wtHolder.style.overflow = 'auto';
                                }
                            });
                        },
                        afterGetColHeader: function (col, TH) {
                            TH.className = 'htCenter';
                        },
                        afterOnCellMouseDown: handleRowClick,
                        hiddenRows: {
                            rows: [],
                            indicators: true
                        },
                        afterChange: function (changes, source) {
                            if (!changes || !Array.isArray(changes)) return;

                            changes.forEach(([row, prop, oldValue, newValue]) => {
                                if (oldValue === newValue) return;

                                const item = this.getSourceDataAtRow(row);
                                if (item && item.id) {
                                    const updatedItem = { ...item, [prop]: newValue };
                                    menuData.set(item.id, updatedItem);
                                }
                            });
                        },
                    });

                    setTimeout(() => {
                        const wtHolders = document.querySelectorAll('.wtHolder');
                        wtHolders.forEach(holder => {
                            holder.style.overflow = 'visible';
                        });

                        if (hot) {
                            if (hot.view && typeof hot.view.render === 'function') {
                                try {
                                    hot.view.render();
                                    hot.refreshDimensions();
                                } catch (renderError) {
                                    console.warn('테이블 렌더링 중 경고:', renderError);
                                }
                            }
                        }
                    }, 200);

                    addSearchUI();

                } catch (error) {
                    console.error('테이블 초기화 오류:', error);
                    container.innerHTML = `
                        <div class="text-center py-8 text-red-600">
                        <i class="fas fa-exclamation-triangle text-3xl mb-4"></i>
                        <p class="font-semibold">테이블 초기화 중 오류가 발생했습니다.</p>
                        <p>오류: ${error.message || '알 수 없는 오류가 발생했습니다.'}</p>
                        </div>
                        `;
                }
            }

            function addSearchUI() {
                const searchField = document.createElement('div');
                searchField.className = 'search-field mt-2 mb-4';
                searchField.innerHTML = `
                                                                                                                <div class="flex items-center justify-end">
                                                                                                                    <input type="text" id="search-input" placeholder="검색어 입력..." 
                                                                                                                        class="p-2 border border-gray-300 rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500">
                                                                                                                    <button id="search-button" 
                                                                                                                        class="bg-blue-600 hover:bg-blue-700 text-white font-medium p-2 rounded-r transition-colors">
                                                                                                                        <i class="fas fa-search"></i>
                                                                                                                    </button>
                                                                                                                </div>
                                                                                                            `;

                const wrapper = container.closest('.handsontable-wrapper');
                if (wrapper) {
                    wrapper.insertBefore(searchField, container);
                }

                const searchInput = document.getElementById('search-input');
                const searchButton = document.getElementById('search-button');

                if (searchInput && searchButton) {
                    const search = function () {
                        if (!hot) return;

                        const searchPlugin = hot.getPlugin('search');
                        if (searchPlugin) {
                            searchPlugin.query(searchInput.value);
                            hot.render();
                        }
                    };

                    searchButton.addEventListener('click', search);
                    searchInput.addEventListener('keydown', function (event) {
                        if (event.key === 'Enter') {
                            event.preventDefault();
                            search();
                        }
                    });
                }
            }

            addRowBtn.addEventListener('click', function () {
                if (!hot) return;

                try {
                    const lastMenuOrder = Math.max(...menuData.map(item => Number(item.menuOrder) || 0), 0) + 10;
                    const newRow = {
                        id: -1,
                        menuKey: "NEW_MENU_" + Date.now(),
                        title: "새 메뉴",
                        url: "#",
                        parentId: null,
                        menuOrder: lastMenuOrder,
                        levels: 0,
                        indent: 0,
                        hasChildren: false,
                        useNewIcon: false,
                        isNewRow: true
                    };

                    menuData.set(newRow.id, newRow);
                    originalData.set(newRow.id, { ...newRow });

                    try {
                        hot.updateSettings({
                            data: menuData,
                            viewportRowRenderingOffset: 15
                        });

                        hot.render();
                    } catch (updateError) {
                        console.error('데이터 업데이트 오류:', updateError);
                        initializeTable(menuData);
                    }

                    setTimeout(() => {
                        try {
                            const lastRow = menuData.size - 1;
                            hot.scrollViewportTo(lastRow);
                            hot.selectCell(lastRow, 1);

                            const container = document.querySelector('.hot-container');
                            if (container) {
                                container.scrollTop = container.scrollHeight;
                            }

                            const wrapper = document.querySelector('.handsontable-wrapper');
                            if (wrapper) {
                                wrapper.style.paddingBottom = '80px';
                            }

                            try {
                                const lastRowCell = hot.getCell(lastRow, 0);
                                if (lastRowCell) {
                                    const lastRowElement = lastRowCell.parentNode;
                                    if (lastRowElement) {
                                        lastRowElement.classList.add('new-row');
                                    }
                                }
                            } catch (e) {
                                console.log('새 행 하이라이트 실패:', e);
                            }

                            if (hot && typeof hot.refreshDimensions === 'function') {
                                hot.refreshDimensions();
                            }
                        } catch (scrollError) {
                            console.error('스크롤 위치 조정 중 오류:', scrollError);
                        }
                    }, 100); // 지연 시간 증가

                    showStatusMessage('새 행이 추가되었습니다. 저장 버튼을 클릭하여 변경사항을 저장하세요.', true);
                } catch (error) {
                    console.error('행 추가 중 오류:', error);
                    showStatusMessage('행 추가 중 오류가 발생했습니다: ' + error.message, false);
                }
            });

            /**
             * 변경된 데이터 가져오기
             */
            function getChangedData() {
                if (!hot || !menuData || !originalData) return [];

                const changes = [];
                menuData.forEach((currentItem, id) => {
                    const originalItem = originalData.get(id);
                    if (!originalItem || id === -1) return;

                    const hasChanges = Object.keys(currentItem).some(key => {
                        // id를 제외한 속성들만 비교
                        if (key === 'id') return false;
                        return currentItem[key] !== originalItem[key];
                    });

                    if (hasChanges) {
                        changes.push(currentItem);
                    }
                });

                console.log('변경된 데이터:', changes); // 디버깅용 로그
                return changes;
            }

            /**
             * 새로 추가된 행 가져오기
             */
            function getNewRows() {
                if (!hot || !menuData) return [];

                return Array.from(menuData.values()).filter(item => item.id === -1);
            }

            /**
             * 삭제된 행 가져오기
             */
            function getDeletedRows() {
                return deletedRows.filter(id => id !== -1);
            }

            /**
             * 저장 버튼 클릭 이벤트
             */
            saveChangesBtn.addEventListener('click', function () {
                if (!hot) return;

                try {
                    const changedData = getChangedData();
                    const newRows = getNewRows();
                    const deletedIds = getDeletedRows();

                    // 변경사항 요약 메시지 생성
                    let summaryMessage = [];
                    if (changedData.length > 0) summaryMessage.push(`수정: ${changedData.length}건`);
                    if (newRows.length > 0) summaryMessage.push(`추가: ${newRows.length}건`);
                    if (deletedIds.length > 0) summaryMessage.push(`삭제: ${deletedIds.length}건`);

                    if (changedData.length === 0 && newRows.length === 0 && deletedIds.length === 0) {
                        showStatusMessage('변경된 데이터가 없습니다.', true);
                        return;
                    }

                    showStatusMessage(`저장 중... (${summaryMessage.join(', ')})`, true);

                    // 안티포지 토큰 가져오기
                    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!tokenInput) {
                        showStatusMessage('보안 토큰을 찾을 수 없습니다.', false);
                        return;
                    }
                    const token = tokenInput.value;

                    // 변경된 데이터가 있을 경우 업데이트
                    let promises = [];
                    if (changedData.length > 0) {
                        promises.push(updateExistingRows(changedData, token));
                    }

                    // 새 행이 있을 경우 생성
                    if (newRows.length > 0) {
                        promises.push(createNewRows(newRows, token));
                    }

                    // 삭제된 행이 있을 경우 삭제
                    if (deletedIds.length > 0) {
                        promises.push(deleteRows(deletedIds, token));
                    }

                    // 모든 작업이 완료되면 최종 결과 표시
                    Promise.all(promises)
                        .then(results => {
                            const successResults = results.filter(r => r.success);
                            const failResults = results.filter(r => !r.success);

                            if (failResults.length > 0) {
                                const errorMessages = failResults.map(r => r.message).join('\n');
                                showStatusMessage(`저장 중 오류 발생:\n${errorMessages}`, false);
                            } else {
                                showStatusMessage(`저장 완료 (${summaryMessage.join(', ')})`, true);
                            }
                        })
                        .catch(error => {
                            showStatusMessage(`저장 중 오류 발생: ${error.message}`, false);
                        });

                } catch (error) {
                    console.error('저장 처리 중 오류:', error);
                    showStatusMessage('저장 처리 중 오류가 발생했습니다: ' + error.message, false);
                }
            });

            /**
             * 기존 행 업데이트 함수
             */
            function updateExistingRows(changedData, token) {
                return fetch('/Handsontable/UpdateMenus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(changedData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('서버 응답 오류: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            // 원본 데이터 업데이트
                            changedData.forEach(changed => {
                                const originalItem = originalData.get(changed.id);
                                if (originalItem) {
                                    originalItem.menuKey = changed.menuKey;
                                    originalItem.title = changed.title;
                                    originalItem.url = changed.url;
                                    originalItem.parentId = changed.parentId;
                                    originalItem.menuOrder = changed.menuOrder;
                                    originalItem.levels = changed.levels;
                                    originalItem.useNewIcon = changed.useNewIcon;
                                }
                            });
                        }
                        return result;
                    });
            }

            /**
             * 새 행 생성 함수
             */
            function createNewRows(newRows, token) {
                return fetch('/Handsontable/CreateMenus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(newRows)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('서버 응답 오류: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            // ID가 -1인 항목들을 새로운 ID로 업데이트
                            if (result.createdMenus && Array.isArray(result.createdMenus)) {
                                result.createdMenus.forEach(createdMenu => {
                                    const tempItem = menuData.get(createdMenu.originalMenuId);

                                    if (tempItem) {
                                        // ID 업데이트
                                        tempItem.id = createdMenu.id;

                                        // isNewRow 플래그 제거
                                        delete tempItem.isNewRow;

                                        // 원본 데이터에 추가
                                        originalData.set(createdMenu.id, { ...tempItem });
                                    }
                                });
                            }
                        }
                        return result;
                    });
            }

            /**
             * 행 삭제 함수
             */
            function deleteRows(deletedIds, token) {
                return fetch('/Handsontable/DeleteMenus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(deletedIds)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('서버 응답 오류: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            // 삭제된 행 목록 초기화
                            deletedRows = [];

                            // 원본 데이터에서도 삭제
                            deletedIds.forEach(id => {
                                originalData.delete(id);
                            });
                        }
                        return result;
                    });
            }

            /**
             * 모든 행 펼치기
             */
            function expandAll() {
                if (!hot || !menuData) return;

                hiddenRows = [];
                const hiddenRowsPlugin = hot.getPlugin('hiddenRows');
                hiddenRowsPlugin.showRows(hiddenRowsPlugin.getHiddenRows());
                hot.render();

                showStatusMessage('모든 행이 펼쳐졌습니다.', true);
            }

            /**
             * 모든 행 접기
             */
            function collapseAll() {
                if (!hot || !menuData) return;

                // 최상위 항목(parentId가 null인 항목)을 제외한 모든 행 숨기기
                hiddenRows = Array.from(menuData.values())
                    .map((item, index) => item.parentId !== null ? index : null)
                    .filter(index => index !== null);

                const hiddenRowsPlugin = hot.getPlugin('hiddenRows');
                hiddenRowsPlugin.hideRows(hiddenRows);
                hot.render();

                showStatusMessage('모든 행이 접혔습니다.', true);
            }

            /**
             * 특정 부모 행의 자식 행들 토글
             */
            function toggleChildren(parentId) {
                if (!hot || !menuData) return;

                const childRows = Array.from(menuData.values())
                    .map((item, index) => item.parentId === parentId ? index : null)
                    .filter(index => index !== null);

                const hiddenRowsPlugin = hot.getPlugin('hiddenRows');
                const allChildrenHidden = childRows.every(row => hiddenRowsPlugin.isHidden(row));

                if (allChildrenHidden) {
                    // 자식 행들 보이기
                    hiddenRowsPlugin.showRows(childRows);
                } else {
                    // 자식 행들 숨기기
                    hiddenRowsPlugin.hideRows(childRows);
                }

                hot.render();
            }

            // 이벤트 리스너 등록
            expandAllBtn.addEventListener('click', expandAll);
            collapseAllBtn.addEventListener('click', collapseAll);

            // 부모 행 클릭 이벤트 처리
            function handleRowClick(event, coords) {
                if (!hot || coords.row < 0) return;

                const clickedItem = Array.from(menuData.values())[coords.row];
                if (clickedItem && clickedItem.hasChildren) {
                    toggleChildren(clickedItem.id);
                }
            }
        });
    </script>
}